# Generated by Django 3.1.3 on 2020-11-16 17:51

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BatchTransferJob',
            fields=[
                ('transferjob_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.transferjob')),
                ('project_name', models.CharField(max_length=150)),
                ('project_description', models.TextField(max_length=2000)),
            ],
            bases=('core.transferjob',),
        ),
        migrations.CreateModel(
            name='BatchTransferSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locked', models.BooleanField(default=False)),
                ('suspended', models.BooleanField(default=False)),
                ('batch_slot_begin_time', models.TimeField(default=datetime.time(22, 0), help_text='Must be set in UTC time zone.')),
                ('batch_slot_end_time', models.TimeField(default=datetime.time(8, 0), help_text='Must be set in UTC time zone.')),
                ('batch_timeout', models.IntegerField(default=3)),
            ],
            options={
                'verbose_name_plural': 'Batch transfer settings',
            },
        ),
        migrations.CreateModel(
            name='BatchTransferRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row_number', models.PositiveIntegerField()),
                ('patient_id', models.CharField(blank=True, max_length=64, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('patient_name', models.CharField(blank=True, max_length=324, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('patient_birth_date', models.DateField(blank=True, error_messages={'invalid': 'Invalid date format.'}, null=True)),
                ('accession_number', models.CharField(blank=True, max_length=16, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('study_date', models.DateField(blank=True, error_messages={'invalid': 'Invalid date format.'}, null=True)),
                ('modality', models.CharField(blank=True, max_length=16, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('pseudonym', models.CharField(blank=True, max_length=64, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('status', models.CharField(choices=[('PE', 'Pending'), ('IP', 'In Progress'), ('CA', 'Canceled'), ('SU', 'Success'), ('WA', 'Warning'), ('FA', 'Failure')], default='PE', max_length=2)),
                ('message', models.TextField(blank=True, default='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('start', models.DateTimeField(blank=True, null=True)),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='batch_transfer.batchtransferjob')),
            ],
            options={
                'ordering': ('row_number',),
                'unique_together': {('row_number', 'job')},
            },
        ),
    ]
